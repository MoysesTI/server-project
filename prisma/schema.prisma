// Prisma schema para SQLite (corrigido)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(uuid())
  name              String
  email             String              @unique
  password          String
  role              String              @default("USER")
  avatarUrl         String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  kanbanBoards      KanbanBoard[]
  kanbanColumns     KanbanColumn[]
  kanbanCards       KanbanCard[]
  kanbanLabels      KanbanLabel[]
  boardMemberships  KanbanBoardMember[]
  cardAssignments   KanbanCard[]        @relation("CardAssignee")
  budgets           Budget[]
  assignedBudgets   BudgetAssignee[]

  @@map("users")
}

// Kanban Models
model KanbanBoard {
  id          String              @id @default(uuid())
  title       String
  description String?
  color       String?             @default("#5664d2")
  userId      String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  user        User                @relation(fields: [userId], references: [id])
  columns     KanbanColumn[]
  members     KanbanBoardMember[]
  labels      KanbanLabel[]

  @@map("kanban_boards")
}

model KanbanBoardMember {
  id        String      @id @default(uuid())
  boardId   String
  userId    String
  role      String      @default("MEMBER") // MEMBER, EDITOR, ADMIN
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  board     KanbanBoard @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([boardId, userId])
  @@map("kanban_board_members")
}

model KanbanColumn {
  id        String      @id @default(uuid())
  title     String
  order     Int
  color     String?
  boardId   String
  userId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  board     KanbanBoard @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id])
  cards     KanbanCard[]

  @@map("kanban_columns")
}

model KanbanCard {
  id          String        @id @default(uuid())
  title       String
  description String?
  order       Int
  color       String?
  dueDate     DateTime?
  columnId    String
  userId      String
  assigneeId  String?
  budgetId    String?       @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  column      KanbanColumn  @relation(fields: [columnId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id])
  assignee    User?         @relation("CardAssignee", fields: [assigneeId], references: [id])
  budget      Budget?       @relation(fields: [budgetId], references: [id])
  labels      CardLabel[]
  attachments Attachment[]
  comments    CardComment[]

  @@map("kanban_cards")
}

model KanbanLabel {
  id        String      @id @default(uuid())
  name      String
  color     String
  boardId   String
  userId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  board     KanbanBoard @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id])
  cards     CardLabel[]

  @@map("kanban_labels")
}

model CardLabel {
  id        String      @id @default(uuid())
  cardId    String
  labelId   String
  createdAt DateTime    @default(now())
  card      KanbanCard  @relation(fields: [cardId], references: [id], onDelete: Cascade)
  label     KanbanLabel @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@unique([cardId, labelId])
  @@map("card_labels")
}

model CardComment {
  id        String     @id @default(uuid())
  content   String
  cardId    String
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  card      KanbanCard @relation(fields: [cardId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id])

  @@map("card_comments")
}

model Attachment {
  id        String     @id @default(uuid())
  name      String
  url       String
  type      String
  size      Int
  cardId    String
  userId    String
  createdAt DateTime   @default(now())
  card      KanbanCard @relation(fields: [cardId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id])

  @@map("attachments")
}

// Budget Models
model Budget {
  id            String           @id @default(uuid())
  serviceNumber String           @unique
  clientName    String
  clientEmail   String?
  clientPhone   String?
  company       String?
  totalAmount   Float
  status        String           @default("PENDING")
  userId        String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  user          User             @relation(fields: [userId], references: [id])
  items         BudgetItem[]
  invoice       Invoice?
  kanbanCard    KanbanCard?
  assignees     BudgetAssignee[]

  @@map("budgets")
}

model BudgetItem {
  id          String  @id @default(uuid())
  description String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  imageUrl    String?
  budgetId    String
  budget      Budget  @relation(fields: [budgetId], references: [id], onDelete: Cascade)

  @@map("budget_items")
}

model BudgetAssignee {
  id        String   @id @default(uuid())
  budgetId  String
  userId    String
  role      String   @default("COLLABORATOR")
  createdAt DateTime @default(now())
  budget    Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([budgetId, userId])
  @@map("budget_assignees")
}

model Invoice {
  id            String   @id @default(uuid())
  invoiceNumber String   @unique
  issueDate     DateTime @default(now())
  dueDate       DateTime
  totalAmount   Float
  notes         String?
  paymentStatus String   @default("PENDING")
  budgetId      String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  budget        Budget   @relation(fields: [budgetId], references: [id])

  @@map("invoices")
}